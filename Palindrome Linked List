/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseLinkedList(ListNode head){
        ListNode prev = null;
        ListNode nextnode = null;
        while(head!=null){
            nextnode = head.next;
            head.next = prev;
            prev = head;
            head = nextnode;
        }
        return prev;
    }
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next == null){
            return true;
        }
        ListNode slow = head;
        ListNode fast = head;

        // Finding middle element
        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }

        slow.next = reverseLinkedList(slow.next);

        slow = slow.next;

        //Compare first half with the second half
        while(slow!=null){
            if(head.val != slow.val){
                return false;
            }
            slow = slow.next;
            head = head.next;
        }
        return true;
    }
}

#Time Complexity - O(n/2)+O(n/2)+O(n/2) [middle element,reverse second half elements, compare 1st and 2nd half]
